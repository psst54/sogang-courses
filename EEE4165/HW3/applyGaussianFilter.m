function ret = applyGaussianFilter(img, pad_size, sigma, dir_number)
[r, c] = size(img);
filter_size = sigma * 6 + 1;

gaussian_filter = getGaussianFilter(sigma, filter_size);

padded_img = padArray(img, pad_size, pad_size);
padded_filter = padArray(gaussian_filter, pad_size, pad_size);
imwrite(uint8(padded_img), strcat( ...
    'result', ...
    num2str(dir_number), ...
    '/padded_img_.png'));

fourier_transform_img = fft2(padded_img);
fourier_transform_img = fftshift(fourier_transform_img);
fourier_transform_filter = fft2(padded_filter);
fourier_transform_filter = fftshift(fourier_transform_filter);

% --------------------------------------------------------
magnitude_spectrum = log(1 + abs(fourier_transform_img));
fourier_transform_scaled = scalePixel(magnitude_spectrum);
imwrite(fourier_transform_scaled, strcat( ...
    'result', ...
    num2str(dir_number), ...
    '/img_fourier.png'));
phase_spectrum = angle(fourier_transform_img);
imwrite(phase_spectrum, strcat( ...
    'result', ...
    num2str(dir_number), ...
    '/img_phase.png'));

magnitude_spectrum = log(1 + abs(fourier_transform_filter));
fourier_transform_scaled = scalePixel(magnitude_spectrum);
imwrite(fourier_transform_scaled, strcat( ...
    'result', ...
    num2str(dir_number), ...
    '/gaussian_filter_fourier_', ...
    num2str(filter_size), ...
    '.png'));
phase_spectrum = angle(fourier_transform_filter);
phase_scaled = scalePixel(phase_spectrum);
imwrite(phase_scaled, strcat( ...
    'result', ...
    num2str(dir_number), ...
    '/gaussian_filter_phase_', ...
    num2str(filter_size), ...
    '.png'));
% --------------------------------------------------------

res = fourier_transform_img .* fourier_transform_filter;

magnitude_spectrum = log(1 + abs(res));
fourier_transform_scaled = scalePixel(magnitude_spectrum);
imwrite(fourier_transform_scaled, strcat( ...
    'result', ...
    num2str(dir_number), ...
    '/gaussian_fourier_', ...
    num2str(filter_size), ...
    '.png'));
phase_spectrum = angle(res);
phase_scaled = scalePixel(phase_spectrum);
imwrite(phase_scaled, strcat( ...
    'result', ...
    num2str(dir_number), ...
    '/gaussian_phase_', ...
    num2str(filter_size), ...
    '.png'));

shifted_result = ifftshift(res);
reconstructed_img = ifft2(shifted_result);
resized_img = reconstructed_img( ...
    int32(filter_size / 2) ...
    : r + int32(filter_size / 2) - 1, ...
    int32(filter_size / 2) ...
    : c + int32(filter_size / 2) - 1);
scaled_img = scalePixel(resized_img);

imwrite(scaled_img, strcat( ...
    'result', ...
    num2str(dir_number), ...
    '/gaussian_reconstructed_img_', ...
    num2str(filter_size), ...
    '.png'));
end